<?php
/**
 * @file
 * Code for the Yellow pages company CT feature.
 */

 define('YP_PRODUCT_SELL', 1);
 define('YP_PRODUCT_BUY', 2);
 define('YP_PRODUCT_MANUFACTURE', 4);
 define('YP_PRODUCT_SERVICES', 8);
 define('YP_PRODUCT_EXPORT', 16);

include_once 'yellow_pages_company_ct.features.inc';
require_once 'yellow_pages_company_ct.fields.inc';

/**
 * Implements hook_menu().
 */
function yellow_pages_company_ct_menu() {
  $menu = array();

  $menu['yp/autocomplete/product'] = array(
    'title' => 'Autocomplete for products',
    'page callback' => '_products_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('use products autocomplete'),
    'type' => MENU_CALLBACK,
  );

  $menu['yp/autocomplete/category'] = array() + $menu['yp/autocomplete/product'];

  return $menu;
}

/**
 * Implements hook_permission().
 */
function yellow_pages_company_ct_permission() {
  $perm = array();

  $perm['use products autocomplete'] = array(
    'title' => t('Use autocomplete in products field'),
    'description' => t('Allow roles to use autocomplete on products field.'),
  );

  $perm['edit related companies'] = array(
    'title' => t('Edit related companies'),
    'description' => t('Allow users to edit only related companies.'),
  );

  $perm['add related companies to user'] =  array(
    'title' => t('Add related companies to user'),
    'description' => t('Allow users to add related companies to another users (works only if role has permission "Administer users").'),
  );

  return $perm;
}

/**
 * Provides product terms suggestons.
 *
 * @param string $input
 *   String to search related terms on.
 */
function _products_autocomplete($type, $input) {
  $product_type = YP_TERM_TYPE_PRODUCT;
  if ($type == 'category') {
    $product_type = YP_TERM_TYPE_CATEGORY;
  }

  $query = db_select('taxonomy_term_data', 't')
    ->fields('t', array('tid', 'name'));
  $query->join('field_data_field_product_type', 'fpt', 't.tid = fpt.entity_id');
  $query->condition('fpt.field_product_type_value', $product_type, '=');
  $query->condition('t.name', '%' . db_like($input) . '%', 'LIKE');
  $query->range(0, 10);
  $result = $query->execute()->fetchAll();

  $response = array();

  foreach ($result as $r) {
    $response[$r->name . ' [tid:' . $r->tid . ']'] = $r->name;
  }

  echo drupal_json_output($response);
  drupal_exit(0);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function yellow_pages_company_ct_form_forward_form_alter(&$form, &$form_state) {
  $form['message']['email']['#default_value'] = '';
  $form['message']['name']['#default_value'] = '';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function yellow_pages_company_ct_form_company_node_form_alter(&$form, &$form_state, $form_id) {
  // Make sync date field readonly.
  $form['field_mdb_sync_date']['#disabled'] = TRUE;
  $hide = array(
    'comment_settings',
    'revision_information',
    'translation',
    'path',
    'author',
  );
  foreach ($hide as $item) {
    if (isset($form[$item])) {
      hide($form[$item]);
    }
  }

  // Add button "Create editor" for company email if no editors.

  if (!empty($form['field_email']['und'][0]['email']['#default_value'])) {
    $form['field_email']['create_user'] = array(
      '#type' => 'submit',
      '#value' => t('Create company editor'),
      '#submit' => array('company_create_editor_user'),
      '#prefix' => '<div id="company-mail-create-user-button-wrapper">',
      '#suffix' => '</div>',
      '#ajax' => array(
        'wrapper' => 'company-mail-create-user-button-wrapper',
        'callback' => 'company_node_form_create_user_ajax_callback',
        'method' => 'replace',
      ),
    );
  }
  dpm($form);
}

function company_create_editor_user (&$form, &$form_state) {
  //create enterprise editor user using form values - add node as related to user
}
function company_node_form_create_user_ajax_callback($form, $form_state) {
  //get message from form after submit and set message instead of button.
  return '<div class="messages status">User created successfully!</div>';
}

/**
 * Implements hook_entity_view().
 */
function yellow_pages_company_ct_entity_view($entity, $entity_type, $view_mode, $langcode) {
  $is_company_page = $entity_type == 'node' && $entity->type == 'company' && $view_mode == 'full';

  if (!$is_company_page) {
    return;
  }

  $source_map = array(
    YP_PRODUCT_BUY => 'group_we_buy',
    YP_PRODUCT_SELL => 'group_we_sell',
    YP_PRODUCT_MANUFACTURE => 'group_products',
    YP_PRODUCT_SERVICES => 'group_services',
    YP_PRODUCT_EXPORT => 'group_we_export',
  );
  global $language;
  if (!empty($entity->field_products)) {
    foreach ($entity->field_products[LANGUAGE_NONE] as $k => $item) {
      $term = $item['taxonomy_term'];
      $target_group = $source_map[$item['product_source']];
      $target_group_field = $target_group . '_content';

      $entity->content[$target_group_field][$k] = array(
        '#type' => 'link',
        '#title' => i18n_taxonomy_term_name($term, $language->language),
        '#href' => url('search/companies', array('absolute' => TRUE)) . '?f[0]=field_products%253Aproduct%253Aparents_all%3A' . $term->tid,
        '#group' => $target_group,
        '#suffix' => '. ',
      );

      $entity->content['#fieldgroups'][$target_group]->children = array(
        $target_group_field,
      );
    }
  }

  drupal_add_js(drupal_get_path('module', 'yellow_pages_company_ct') . '/js/yellow_pages_company_ct.scripts.js');
}

/**
 * Implements hook_node_view().
 */
function yellow_pages_company_ct_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'company') {
    (int) $node->field_company_views[LANGUAGE_NONE][0]['value'] += 0.5;
    field_attach_update('node', $node);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide field related company for users that haven't permission
 *   "Edit related companies".
 */
function yellow_pages_company_ct_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form['#user'];
  $access = user_access('edit related companies', $account) && user_access('add related companies to user');
  $form['field_related_company']['#access'] = $access;
}

/**
 * Implements hook_node_access().
 */
function yellow_pages_company_ct_node_access($node, $op, $account) {
  $access = NODE_ACCESS_IGNORE;

  if ($op == 'update' && user_access('edit related companies', $account)) {
    $node_is_company = !empty($node->type) && $node->type == 'company';
    if ($node_is_company) {
      $grant = _yellow_pages_company_ct_grant_company_node_access($node->nid, $account);
      $access = $grant ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
    }
  }

  return $access;
}

/**
 * Verify if company node nid is related to indicated account or current user.
 */
function _yellow_pages_company_ct_grant_company_node_access($nid, $account = NULL) {
  if (empty($account->uid)) {
    $account = $GLOBALS['user'];
  }

  $account = user_load($account->uid);
  $related_companies = array();
  if (!empty($account->field_related_company['und'])) {
    foreach ($account->field_related_company['und'] as $company) {
      $nids = _yellow_pages_company_ct_get_translations_nids($company['target_id']);
      $related_companies = array_merge($related_companies, $nids);
    }
  }

  return in_array($nid, $related_companies);
}

/**
 * Get node translations nids by node nid..
 */
function _yellow_pages_company_ct_get_translations_nids($nid) {
  $nids = array();

  $node = node_load($nid);
  $translations = translation_node_get_translations($node->tnid);
  foreach ($translations as $related_company) {
    $nids[] = $related_company->nid;
  }

  return $nids;
}

/**
 * Implements hook_token_info().
 *
 * This hook will register new token contains company editors emails.
 */
function yellow_pages_company_ct_token_info() {
  $info['tokens']['node']['company-editors-emails'] = array(
    'name' => t('Company editors emails'),
    'description' => t('Email addresses of Enterprise Editors which has current company node as related company.'),
    'type' => 'node',
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function yellow_pages_company_ct_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    if (!empty($tokens['company-editors-emails'])) {
      $original = $tokens['company-editors-emails'];
      $replacements[$original] = _get_company_editors_emails($node->nid);
    }
  }

  return $replacements;
}

/**
 * Gets company node related editors emails.
 */
function _get_company_editors_emails($nid) {
  $nids = _yellow_pages_company_ct_get_translations_nids($nid);

  $query = db_select('field_data_field_related_company', 'rc')
    ->condition('field_related_company_target_id', $nids, 'IN');
  $query->innerJoin('users', 'u', 'u.uid = rc.entity_id');
  $query->fields('u', array('mail'))
    ->distinct();
  $result = $query->execute();

  $mails = array();
  while ($mail = $result->fetchField()) {
    $mails[] = $mail;
  }
  $mails_list = implode(', ', $mails);

  return $mails_list;
}
