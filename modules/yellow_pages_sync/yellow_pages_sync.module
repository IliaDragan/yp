<?php
/**
 * @file
 * Synchronize data with MDB.
 */

 define('SYNC_VOCABULARY', 'products');
 define('SYNC_BATCH', 50);

/**
 * Implements hook_menu().
 */
function yellow_pages_sync_menu() {
  $items = array();

  $items['admin/config/yp/sync'] = array(
    'title' => 'Synchronize',
    'description' => 'Sync content from MDB source.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yellow_pages_sync_admin_form'),
    'access arguments' => array('administer yellow pages sync'),
    'file' => 'yellow_pages_sync.admin.inc',
  );

  $items['yp/sync/%'] = array(
    'title' => 'Sync single entry',
    'page callback' => 'yellow_pages_sync_single_node',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function yellow_pages_sync_fetch_remote_enterprise($eid) {
  if (empty($eid)) {
    return FALSE;
  }

  $xml_file = 'http://test.varoinform.md:8080/api/enterprises/' . $eid . '/';
  $xml_data = @file_get_contents($xml_file);

  $xml = FALSE;
  try {
    $xml = new SimpleXMLElement($xml_data);
  }
  catch (Exception $e) {
    $message = $e->getMessage() . '. Tried to import entity with id: ' . $eid . '.';
    watchdog_exception('yp_sync', $e, $message);
  }

  return $xml;
}

function yellow_pages_sync_single_node($eid) {
  $xml = yellow_pages_sync_fetch_remote_enterprise($eid);

  if ($xml) {
    return yellow_pages_sync_node($xml);
  }

  return FALSE;
}

function yellow_pages_sync_nodes(&$context) {
  $xml = NULL;

  if (!isset($context['sandbox']['progress'])) {
    try {
      $xml_data = @file_get_contents('http://test.varoinform.md:8080/api/enterprises/?page=156');
      $xml = new SimpleXMLElement($xml_data);
    }
    catch (Exception $e) {
      watchdog_exception('yp_sync', $e);
      return;
    }
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = (int) $xml->count;

    db_delete('yp_sync_state')->execute();
  }
  elseif (isset($context['sandbox']['next'])) {
    try {
      $xml_data = @file_get_contents($context['sandbox']['next']);
      $xml = new SimpleXMLElement($xml_data);
    }
    catch (Exception $e) {
      watchdog_exception('yp_sync', $e);
      return;
    }
  }

  if (is_object($xml)) {
    unset($context['sandbox']['next']);
    if (isset($xml->next)) {
      $next = (string) $xml->next;
      $context['sandbox']['next'] = $next;
    }

    foreach ($xml->results->{'list-item'} as $list_item) {
      yellow_pages_sync_node($list_item);
      $context['message'] = t('Now processing %title (%count)', array('%title' => $list_item->title, '%count' => $context['sandbox']['progress']));

      $context['sandbox']['progress']++;
    }

    if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
  }
}

function yellow_pages_sync_node(SimpleXMLElement $list_item) {
  $languages = array_keys(locale_language_list('name'));
  $node_defaults = array(
    'type' => 'company',
    'language' => 'ru',
    'uid' => 1,
    'status' => 0,
    'promote' => 0,
  );

  $item = yellow_page_sync_process_source_element($list_item);
  $tnid = NULL;

  $query = db_select('yp_sync_state', 'yp_sync')
    ->fields('yp_sync', array(
      'nid',
      'last_sync'
    ))
    ->condition('eid', $item['id'], '=');
  $results = $query->execute()->fetchAll();
  $result = reset($results);

//   if (isset($result->last_sync) && $result->last_sync == $item['last_change']) {
//     return;
//   }

  // Basics.
  if (empty($result)) {
    $node_defaults['language'] = 'ru';
    $entity = entity_create('node', $node_defaults);
  }
  else {
    $entities = entity_load('node', array($result->nid));
    $entity = reset($entities);
  }

  // Title.
  $entity->title = $item['title']['ru'];
  // Emails.
  if (!empty($item['email'])) {
    unset($entity->field_email[LANGUAGE_NONE]);
    foreach ($item['email'] as $k => $email) {
      $entity->field_email[LANGUAGE_NONE][$k]['email'] = $email;
    }
  }
  // URL's.
  if (!empty($item['url'])) {
    unset($entity->field_company_site[LANGUAGE_NONE]);
    foreach ($item['url'] as $k => $url) {
      $entity->field_company_site[LANGUAGE_NONE][$k]['url'] = $url;
    }
  }
  // Products.
  if (!empty($item['products'])) {
    unset($entity->field_products[LANGUAGE_NONE]);
    foreach ($item['products'] as $k => $product) {
      $entity->field_products[LANGUAGE_NONE][$k] = array(
        'product_source' => $product['source'],
        'product' => $product['product'],
      );
    }
  }
  // Addresses.
  if (!empty($item['addresses'])) {
    unset($entity->field_address[LANGUAGE_NONE]);
    foreach ($item['addresses'] as $k => $address) {
      $entity->field_address[LANGUAGE_NONE][$k] = array(
        'country' => 'MD',
        'locality' => $address['city'],
        'postal_code' => $address['pcode'],
        'thoroughfare' => $address['address'],
        'premise' => $address['premise'],
      );
    }
  }
  // Contacts.
  if (!empty($item['contacts'])) {
    unset($entity->field_landline_phone[LANGUAGE_NONE]);
    foreach ($item['contacts']['landline'] as $k => $number) {
      $entity->field_landline_phone[LANGUAGE_NONE][$k]['value'] = $number;
    }

    unset($entity->field_mobile_phone[LANGUAGE_NONE]);
    foreach ($item['contacts']['mobile'] as $k => $number) {
      $entity->field_mobile_phone[LANGUAGE_NONE][$k]['value'] = $number;
    }

    unset($entity->field_fax[LANGUAGE_NONE]);
    foreach ($item['contacts']['fax'] as $k => $number) {
      $entity->field_fax[LANGUAGE_NONE][$k]['value'] = $number;
    }
  }
  // Sync time.
  $sync_time = $item['last_change'];
  $entity->field_mdb_sync_date[LANGUAGE_NONE][0]['value'] = date('Y-m-d H:i:s', $sync_time);
  // Save new node.
  node_save($entity);

  $url_alias = array(
    'source' => 'node/' . $entity->nid,
    'alias' => yellow_pages_sync_get_alias($item['id'], $entity->title),
    'language' => 'ru',
  );
  path_save($url_alias);

  db_merge('yp_sync_state')
    ->key(array(
      'nid' => $entity->nid,
      'eid' => $item['id'],
    ))
    ->fields(array(
      'nid' => $entity->nid,
      'eid' => $item['id'],
      'last_sync' => $sync_time,
      'parent' => $item['parent_id']
    ))
    ->execute();

  // Update node parent.
  $tnid = $entity->nid;
  db_update('node')
    ->fields(array('tnid' => $tnid))
    ->condition('nid', $entity->nid, '=')
    ->execute();

  // Delete node translations.
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('tnid', $tnid, '=')
    ->condition('nid', $tnid, '<>');
  $result = $query->execute()->fetchCol();
  if (!empty($result)) {
    node_delete_multiple($result);
  }

  // Translations.
  foreach ($languages as $lang) {
    if ($lang == 'ru') {
      continue;
    }

    $translated_entity = clone($entity);
    unset($translated_entity->nid);
    unset($translated_entity->vid);
    $translated_entity->title = $item['title'][$lang];
    $translated_entity->language = $lang;

    // Parent reference.
    $translated_entity->tnid = $tnid;

    node_save($translated_entity);

    $url_alias = array(
      'source' => 'node/' . $translated_entity->nid,
      'alias' => yellow_pages_sync_get_alias($item['id'], $translated_entity->title),
      'language' => $lang,
    );
    path_save($url_alias);
  }

  return $entity;
}

function yellow_pages_sync_get_alias($nid, $title) {
  return 'info/companies/' . $nid . '-' . drupal_html_class(transliteration_get($title));
}

function yellow_page_sync_process_source_element(SimpleXMLElement $source) {
  $result = array();
  $result['id'] = (int) $source->id;
  $result['parent_id'] = !empty((int) $source->parent_id) ? (int) $source->parent_id : 0;
  // Title.
  $result['title'] = yellow_pages_sync_process_source_element_title($source);
  // Email.
  $result['email'] = yellow_pages_sync_process_source_element_email($source);
  // URL.
  $result['url']   = yellow_pages_sync_process_source_element_url($source);
  // Products.
  $result['products'] = yellow_pages_sync_process_source_element_products($source);
  // Addresses.
  $result['addresses'] = yellow_pages_sync_process_source_element_address($source);
  // Contacts.
  $result['contacts'] = yellow_pages_sync_process_source_element_contacts($source);
  // Last change.
  $result['last_change'] = strtotime((string) $source->last_change);

  return $result;
}

function yellow_pages_sync_process_source_element_title(SimpleXMLElement $source) {
  $source_title = $source->titles;
  $titles = array();
  $locales = array('ru', 'ro', 'en');

  foreach ($source_title->{'list-item'} as $item) {
    if ((string) $item->title_type == 'DE JURE') {
      foreach ($locales as $locale) {
        $titles[$locale] = (string) $item->title . ' ' . (string) $source->enterprise_type->{$locale . '_field'};
        if (!empty((string) $item->appendix->{$locale . '_field'})) {
          $titles[$locale] .= ', ' . (string) $item->appendix->{$locale . '_field'};
        }
      }
    }
    elseif ((string) $item->title_type == 'DE FACTO') {
      foreach ($locales as $locale) {
        $titles[$locale] .= ' / ' . (string) $item->title . ' ' . (string) $item->appendix->{$locale . '_field'};
      }
    }
  }

  yellow_pages_sync_trim($titles);

  return $titles;
}

function yellow_pages_sync_process_source_element_email(SimpleXMLElement $source) {
  $source_email = $source->emails;
  $emails = array();

  if (isset($source_email->{'list-item'})) {
    foreach ($source_email->{'list-item'} as $item) {
      $emails[] = (string) $item;
    }
  }

  yellow_pages_sync_trim($emails);

  return $emails;
}

function yellow_pages_sync_process_source_element_url(SimpleXMLElement $source) {
  $source_url = $source->www_set;
  $urls = array();

  if (isset($source_url->{'list-item'})) {
    foreach ($source_url->{'list-item'} as $item) {
      $urls[] = (string) $item;
    }
  }

  yellow_pages_sync_trim($urls);

  return $urls;
}

function yellow_pages_sync_process_source_element_products(SimpleXMLElement $source) {
  $source_products = $source->products;
  $products = array();

  $map = array(
    'торговля' => YP_PRODUCT_SELL,
    'услуга' => YP_PRODUCT_SERVICES,
    'производство' => YP_PRODUCT_MANUFACTURE,
    'покупка' => YP_PRODUCT_BUY,
  );

  if (isset($source_products->{'list-item'})) {
    foreach ($source_products->{'list-item'} as $item) {
      $pid = (int) $item->product;
      $tid = yellow_pages_sync_synced_term($pid);

      if (!$tid) {
        // @todo
        // Maybe create new product.
        watchdog('yp_sync', 'No match found for product with id: %id', array('%id' => $pid), WATCHDOG_NOTICE);
      }
      else {
        foreach ($item->type->{'list-item'} as $item) {
          $source = mb_strtolower((string) $item->ru_field);
          $products[] = array(
            'product' => $tid,
            'source' => $map[$source],
          );
        }
      }
    }
  }

  return $products;
}

function yellow_pages_sync_process_source_element_address(SimpleXMLElement $source) {
  $source_address = $source->locations;
  $addresses = array();

  if (isset($source_address->{'list-item'})) {
    foreach ($source_address->{'list-item'} as $item) {
      $street = trim((string) $item->street->en_field);
      $house = trim((string) $item->house->en_field);
      $office = trim((string) $item->office);

      $thoroughfare = str_replace(array('bd.', 'str.'), '', $street);
      if (!empty($house)) {
        $thoroughfare .= ', ' . $house;
      }

      $addresses[] = array(
        'city' => str_replace(array('mun.', 'or.', 's.'), '', trim((string) $item->town->en_field)),
        'pcode' => (int) $item->pcode->{'list-item'},
        'address' => $thoroughfare,
        'premise' => $office,
      );
    }
  }

  return $addresses;
}

function yellow_pages_sync_process_source_element_contacts(SimpleXMLElement $source) {
  $source_contacts = $source->contacts;
  $contacts = array(
    'landline' => array(),
    'mobile' => array(),
    'fax' => array(),
  );

  foreach ($source_contacts->{'list-item'} as $item) {
    $phone_type = (string) $item->phone->phone_type;

    $number = trim((string) $item->phone->phone);
    switch ($phone_type) {
      case 'TEL':
        $contacts['landline'][] = $number;
        break;
      case 'MOB':
        $contacts['mobile'][] = $number;
        break;
      case 'T/F':
        $contacts['landline'][] = $number;
        $contacts['fax'][] = $number;
        break;
    }
  }

  return $contacts;
}

function yellow_pages_sync_term_target_vocabulary() {
  $vid = &drupal_static(__FUNCTION__, NULL);

  if (!$vid) {
    $voc = taxonomy_vocabulary_machine_name_load(SYNC_VOCABULARY);
    $vid = $voc->vid;
  }

  return $vid;
}

function yellow_pages_sync_trim(array $input) {
  array_walk($input, function (&$v) {
    $v = trim($v);
  });

  return $input;
}

function yellow_pages_sync_taxonomy(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['categories'] = array();
    $context['sandbox']['categories_synced'] = FALSE;
    $context['sandbox']['vocabulary'] = yellow_pages_sync_term_target_vocabulary();

    // Read and process categories.
    $xml_nodes_file = 'http://test.varoinform.md:8080/api/nodes/';
    $xml_nodes_data = @file_get_contents($xml_nodes_file);
    $xml_nodes = new SimpleXMLElement($xml_nodes_data);

    foreach ($xml_nodes->{'list-item'} as $item) {
      $id = (int) $item->id;
      if ($id < 3) {
        continue;
      }

      $parents = array();
      foreach ($item->parents->{'list-item'} as $parent) {
        $parents[] = (int) $parent;
      }

      $context['sandbox']['categories'][(int) $item->id] = array(
        'ru_field' => (string) $item->ru_field,
        'ro_field' => (string) $item->ro_field,
        'en_field' => (string) $item->en_field,
        'id' => (int) $item->id,
        'parents' => $parents,
      );
    }

    $context['sandbox']['products'] = array();

    // Read and process products.
    $xml_products_file = 'http://test.varoinform.md:8080/api/products/';
    $xml_products_data = @file_get_contents($xml_products_file);
    $xml_products = new SimpleXMLElement($xml_products_data);

    foreach ($xml_products->{'list-item'} as $item) {
      $parents = array();

      foreach ($item->nodes->{'list-item'} as $parent) {
        $parents[] = (int) $parent;
      }

      $context['sandbox']['products'][(int) $item->id] = array(
        'ru_field' => (string) $item->ru_field,
        'ro_field' => (string) $item->ro_field,
        'en_field' => (string) $item->en_field,
        'id' => (int) $item->id,
        'parents' => $parents,
      );
    }

    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($xml_products->{'list-item'});
  }

  // Sync categories.
  if (!$context['sandbox']['categories_synced']) {
    foreach ($context['sandbox']['categories'] as $source_id => $item) {
      $term = yellow_pages_sync_create_term((string) $item['ru_field'], $context['sandbox']['vocabulary'], array(), YP_TERM_TYPE_CATEGORY, (int) $item['id']);
      $context['sandbox']['categories'][$source_id]['tid'] = $term->tid;

      $new_parents = array();
      foreach ($item['parents'] as $parent) {
        $parent_id = $parent;
        if ($parent_id < 2) {
          continue;
        }

        $parent_term_name = (string) $context['sandbox']['categories'][$parent_id]['ru_field'];
        $parent_term_id = (int) $context['sandbox']['categories'][$parent_id]['id'];
        $parent_term = yellow_pages_sync_create_term($parent_term_name, $context['sandbox']['vocabulary'], array(), YP_TERM_TYPE_CATEGORY, $parent_term_id);
        $new_parents[] = $parent_term->tid;
      }

      if (!empty($new_parents)) {
        yellow_pages_sync_create_term((string) $item['ru_field'], $context['sandbox']['vocabulary'], $new_parents, YP_TERM_TYPE_CATEGORY, (int) $item['id']);
      }
    }

    $context['sandbox']['categories_synced'] = TRUE;
  }

  // Sync products.
  $current = $context['sandbox']['progress'];
  $slice = array_slice($context['sandbox']['products'], $current, $current + SYNC_BATCH);
  foreach ($slice as $source_id => $item) {
    $parents = array();
    foreach ($item['parents'] as $parent) {
      $parents[] = (int) $context['sandbox']['categories'][$parent]['tid'];
    }

    yellow_pages_sync_create_term((string) $item['ru_field'], $context['sandbox']['vocabulary'], $parents, YP_TERM_TYPE_PRODUCT, (int) $item['id']);

    $context['sandbox']['progress']++;
  }

  watchdog('yp_sync', "Syncing taxonomy. Progress: {$context['sandbox']['progress']}/{$context['sandbox']['max']}.", array(), WATCHDOG_INFO);

  drupal_get_messages();

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function yellow_pages_sync_create_term($name, $vid, array $parent = array(), $type = YP_TERM_TYPE_PRODUCT, $mdb_id = 0) {
  $tid = yellow_pages_sync_synced_term($mdb_id, $type);
  $term = ($tid) ? taxonomy_term_load($tid) : FALSE;

  if (!$term) {
    $term = new stdClass();
    $term->name = $name;
    $term->vid = $vid;
    $term->field_product_type[LANGUAGE_NONE][0]['value'] = $type;
  }

  $term->parent = 0;
  if (!empty($parent)) {
    $term->parent = $parent;
  }

  taxonomy_term_save($term);

  if ($mdb_id) {
    db_merge('yp_term_sync_state')
    ->key(array(
      'pid' => $mdb_id,
      'type' => $type,
    ))
    ->fields(array(
      'pid' => $mdb_id,
      'tid' => $term->tid,
      'type' => $type,
    ))
    ->execute();
  }

  return $term;
}

function yellow_pages_sync_synced_term($pid, $type = YP_TERM_TYPE_PRODUCT) {
  $query = db_select('yp_term_sync_state', 'yts')
    ->fields('yts', array('tid'))
    ->condition('pid', $pid, '=')
    ->condition('type', $type, '=');
  $result = $query->execute()->fetchCol();

  return reset($result);
}

function yellow_pages_sync_batch_finish($success, $results, $operations) {
  drupal_get_messages();
  if ($success) {
    drupal_set_message(t('Synchronisation process complete.'));
  }
  else {
    drupal_set_message(t('Synchronisation process failed.'), 'error');
  }
}

/**
 * Implements hook_node_delete().
 */
function yellow_pages_sync_node_delete($node) {
  if ($node->type == 'company') {
    db_delete('yp_sync_state')
      ->condition('nid', $node->nid, '=')
      ->execute();
  }
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function yellow_pages_sync_taxonomy_term_delete($term) {
  $vid = yellow_pages_sync_term_target_vocabulary();

  if ($term->vid == $vid) {
    db_delete('yp_term_sync_state')
      ->condition('tid', $term->tid, '=')
      ->execute();
  }
}

function yellow_pages_sync_filials(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $query = db_select('yp_sync_state')
      ->condition('parent', 0, '<>')
      ->countQuery();
    $result = $query->execute()->fetchCol();

    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = reset($result);
  }

  $query = db_select('yp_sync_state', 'ysf')
    ->fields('ysf', array('nid', 'eid', 'parent'))
    ->condition('parent', 0, '<>')
    ->range($context['sandbox']['progress'], SYNC_BATCH);
  $results = $query->execute()->fetchAll();

  foreach ($results as $result) {
    $query = db_select('yp_sync_state', 'yst')
      ->fields('yst', array('nid'))
      ->condition('eid', $result->parent, '=');
    $nid_result = $query->execute()->fetchCol();
    $nid = reset($nid_result);

    if (!$nid) {
      $xml = yellow_pages_sync_fetch_remote_enterprise($result->parent);
      if ($xml) {
        $parent_node = yellow_pages_sync_node($xml);
      }
    }
    else {
      $parent_node = node_load($nid);
    }

    $node = node_load($result->nid);

    $context['sandbox']['progress']++;
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}
