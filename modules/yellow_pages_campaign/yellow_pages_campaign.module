<?php
/**
 * @file
 * Manage Yellow Pages campaign and banner blocks.
 */

include_once 'yellow_pages_campaign.features.inc';

define('YP_RULE_GENERIC', 1);
define('YP_RULE_COMPANY', 2);
define('YP_RULE_PAGE', 4);
define('YP_RULE_KEYWORDS', 8);

/**
 * Implements hook_ctools_plugin_directory().
 */
function yellow_pages_campaign_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_menu().
 */
function yellow_pages_campaign_menu() {
  $menu = array();

  $menu['node/%node/rules'] = array(
    'title' => 'Display rules',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yellow_pages_campaign_node_rules_form', 1),
    'access callback' => 'yellow_pages_campaign_node_rules_access',
    'access arguments' => array(1),
    'theme callback' => 'variable_get',
    'theme arguments' => array('admin_theme'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'yellow_pages_campaign.rules.inc',
  );

  return $menu;
}

/**
 * Custom access callback for the campaign rules page.
 *
 * Limits rules tab only for campaign type ad's.
 *
 * @see yellow_pages_campaign_menu()
 */
function yellow_pages_campaign_node_rules_access($node) {
  $entity = entity_metadata_wrapper('node', $node);

  if ($entity->field_ad_type->value() != 'campaign') {
    return FALSE;
  }

  return TRUE;
}

/**
 * Fetch nodes by type.
 *
 * @param string $type
 *   The type of banner/campaign.
 * @param int $count
 *   Number of nodes to fetch.
 * @param int $offset
 *   Skip this amount of nodes.
 *
 * @return Array|boolean
 *   An array with node objects, FALSE on failure.
 */
function yellow_pages_campaign_get_content($type = 'banner', $size = 'side_square', $count = 1, $offset = 1) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'advertisement')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_ad_size', 'value', $size, '=')
    ->fieldCondition('field_ad_type', 'value', $type, '=')
    ->range($offset, $count);
  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);

    return $nodes;
  }

  return FALSE;
}

/**
 * Theme wrapper for ad markup.
 *
 * @param array $nodes
 *   Set of nodes to generate markup from.
 *
 * @return string
 *   HTML markup.
 */
function yellow_pages_campaign_create_markup(array $nodes) {
  $ad_markup = array();
  foreach ($nodes as $node) {
    $render = node_view($node, 'full');
    $ad_markup[] = drupal_render($render);
  }

  return implode('', $ad_markup);
}

/**
 * Implements hook_theme().
 */
function yellow_pages_campaign_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['yp__node__advertisement'] = array(
    'template' => 'yp--node--advertisement',
    'path' => $path . '/templates',
  );

  $hooks['yp_campaign_rule_element'] = array(
    'render element' => 'element',
  );

  return $hooks;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Alter the way campaign content is shown.
 */
function yellow_pages_campaign_preprocess_node(&$variables) {
  $elements = $variables['elements'];

  if ($elements['#view_mode'] != 'full') {
    return;
  }

  $classes = array('yellow-pages-advert');
  $node = $elements['#node'];
  $entity = entity_metadata_wrapper('node', $node);

  $image_style = yellow_pages_campaign_image_style($entity->field_ad_size->value());
  if (!$image_style) {
    return;
  }

  $link = $entity->field_ad_url->value();
  $image_tag = theme_image_style(array(
    'style_name' => $image_style,
    'path' => $entity->field_ad_image->value()['uri'],
    'width' => '',
    'height' => '',
    'alt' => '',
    'title' => $link['title'],
    'attributes' => array(),
  ));

  $link_tag = l($image_tag, $link['url'], array(
    'html' => TRUE,
    'attributes' => array(
      'target' => '_blank',
    ),
  ));

  $classes[] = drupal_html_class($entity->field_ad_size->value());
  $classes[] = drupal_html_class($entity->field_ad_type->value());
  $variables['additional_classes'] = implode(' ', $classes);
  $variables['ad_markup'] = $link_tag;
  $variables['theme_hook_suggestions'][] = 'yp__node__advertisement';
}

/**
 * Render callback for the ctools plugin.
 */
function yellow_pages_campaign_ad_render($subtype, $conf, $args, $context) {
  $block = new stdClass();

  $offset = isset($conf['offset']) ? $conf['offset'] : 1;
  $amount = isset($conf['amount']) ? $conf['amount'] : 3;
  $type = isset($conf['type']) ? $conf['type'] : 'banner';

  $content = yellow_pages_campaign_get_content($type, $subtype, $amount, --$offset);
  $markup = '';
  if (is_array($content)) {
    $markup = yellow_pages_campaign_create_markup($content);
  }

  $block->content = $markup;

  return $block;
}

/**
 * Map ad types/sizes with image styles.
 *
 * @param string $type
 *   Type identifier.
 *
 * @return string|boolean
 *   Specific image style, or FALSE when no map found.
 */
function yellow_pages_campaign_image_style($type = 'side_square') {
  $map = array(
    'side_square' => 'advertisement_square',
    'top_wide' => 'advertisement_wide',
  );

  return isset($map[$type]) ? $map[$type] : FALSE;
}

/**
 * CTools plugin edit form definition.
 */
function yellow_pages_campaign_ad_render_edit_form($form, &$form_state) {
  $conf = $form_state['conf'];

  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => array(
      'banner' => t('Banner'),
      'campaign' => t('Campaign'),
    ),
    '#description' => t('Show this type of advertisement'),
    '#default_value' => isset($conf['type']) ? $conf['type'] : 'banner',
  );

  $form['offset'] = array(
    '#type' => 'textfield',
    '#title' => t('Offset'),
    '#description' => t('Start from this entry'),
    '#default_value' => isset($conf['offset']) ? $conf['offset'] : 1,
    '#element_validate' => array('element_validate_integer_positive'),
    '#size' => 3,
  );

  $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#description' => t('Show this amount of entries'),
    '#default_value' => isset($conf['amount']) ? $conf['amount'] : 3,
    '#element_validate' => array('element_validate_integer_positive'),
    '#size' => 3,
  );


  return $form;
}

/**
 * Custom submit handler for CTools form definition.
 *
 * @see yellow_pages_campaign_ad_render_edit_form()
 */
function yellow_pages_campaign_ad_render_edit_form_submit($form, &$form_state) {
  $fields = array(
    'type',
    'offset',
    'amount',
  );
  $input = $form_state['input'];

  foreach ($fields as $field) {
    if (isset($input[$field])) {
      $form_state['conf'][$field] = $input[$field];
    }
  }
}

/**
 * Retrieve all rules types.
 *
 * @return array
 *   A set of defined rules types.
 */
function yellow_pages_campaign_rules_list() {
  $rules_list = &drupal_static(__FUNCTION__, array());

  if (empty($rules_list)) {
    $query = db_select('yp_campaign_rules_type', 'yp_rt')
      ->fields('yp_rt', array('id', 'label'));
    $result = $query
      ->execute()
      ->fetchAllKeyed();

    $rules_list = $result;
  }

  return $rules_list;
}

function yellow_pages_campaign_rules_save(array $rules, $node_id) {
  if (empty($rules) || empty($node_id)) {
    return;
  }

  yellow_pages_campaign_rules_purge($node_id);

  $fields = array(
    'nid',
    'rule',
    'value',
  );
  $query = db_insert('yp_campaign_rules_usage')->fields($fields);

  foreach ($rules as $rule) {
    $values = array(
      'nid' => $node_id,
      'rule' => $rule['rule_type'],
      'value' => $rule['rule_value'],
    );
    $query->values($values);
  }

  $query->execute();
}

function yellow_pages_campaign_rules_purge($nid) {
  if (empty($nid)) {
    return;
  }

  db_delete('yp_campaign_rules_usage')
    ->condition('nid', $nid, '=')
    ->execute();
}
