<?php
/**
 * @file
 * Synchronize data with MDB.
 */

 define('CATEGORIES_VOCABULARY', 'categories');
 define('SYNC_BATCH', 5);

/**
 * Implements hook_menu().
 */
function yellow_pages_sync_menu() {
  $items = array();

  $items['admin/config/yp/sync'] = array(
    'title' => 'Synchronize',
    'description' => 'Setup data sync from MDB source.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yellow_pages_sync_admin_form'),
    'access arguments' => array('administer yellow pages sync'),
    'file' => 'yellow_pages_sync.admin.inc',
  );

  return $items;
}

function yellow_pages_sync_nodes(&$context) {
  $conn = Database::getConnection('default', 'mdb');

  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $max_elements = $conn
      ->select('enterprise_enterprise', 'ent')
      ->countQuery()
      ->execute()
      ->fetchField();
    $context['sandbox']['max'] = 10;//$max_elements;
  }

  $query = $conn->select('enterprise_enterprise', 'ent');

  // Join the titles.
  $query->leftJoin('enterprise_title', 'ent_title', 'ent.id = ent_title.enterprise_id');
  // Join the url.
  $query->leftJoin('enterprise_www', 'ent_url', 'ent.id = ent_url.enterprise_id');

  $query
    ->fields('ent', array('id', 'activity'))
    ->fields('ent_title', array('title'))
    ->fields('ent_url', array('url'));

  $query->range($context['sandbox']['progress'], SYNC_BATCH);

  $result = $query
    ->execute()
    ->fetchAll();

  $languages = array_keys(locale_language_list('name'));
  $node_defaults = array(
    'type' => 'company',
    'language' => 'ru',
    'uid' => 1,
    'status' => 0,
    'promote' => 0,
  );
  $voc = taxonomy_vocabulary_machine_name_load(CATEGORIES_VOCABULARY);

  foreach ($result as $source) {
    $tnid = NULL;
    if (empty($source->title)) {
      $context['sandbox']['max']--;
      continue;
    }

    $context['sandbox']['progress']++;
    $context['message'] = t('Now processing %title', array('%title' => $source->title));

    // Basics.
    $node_defaults['language'] = 'ru';
    $entity = entity_create('node', $node_defaults);

    // Categories.
    if ($voc) {
      $query = $conn->select('enterprise_product', 'ep');
      $query->join('product_product', 'pp', 'ep.product_id = pp.id');
      $query->fields('pp', array('ru_field', 'ro_field', 'en_field'));
      $query->condition('ep.enterprise_id', $source->id, '=');
      $p_result = $query->execute()->fetchAll();

      foreach ($p_result as $p) {
        $source->products[] = yellow_pages_sync_create_term($p->ru_field, $voc->vid);
      }
    }

    // Fields.
    yellow_pages_sync_fill_entity($entity, $source);

    // Save new node.
    node_save($entity);

    // Update node parent.
    $tnid = $entity->nid;
    db_update('node')
      ->fields(array('tnid' => $tnid))
      ->condition('nid', $entity->nid, '=')
      ->execute();

    // Translations.
    foreach ($languages as $lang) {
      if ($lang == 'ru') {
        continue;
      }

      $node_defaults['language'] = $lang;
      $translated_entity = entity_create('node', $node_defaults);

      // Fields.
      yellow_pages_sync_fill_entity($translated_entity, $source);

      // Parent reference.
      $translated_entity->tnid = $tnid;

      node_save($translated_entity);
    }
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function yellow_pages_sync_fill_entity(stdClass $target, stdClass $source) {
  $target->title = $source->title;
  $target->body[LANGUAGE_NONE][0]['value'] = $source->activity;
  $target->field_company_site[LANGUAGE_NONE][0]['url'] = $source->url;
  $target->field_mdb_sync_date[LANGUAGE_NONE][0]['value'] = date('Y-m-d H:i:s', time());

  if (isset($source->products) && is_array($source->products)) {
    foreach ($source->products as $product) {
      $target->field_categories[LANGUAGE_NONE][]['tid'] = $product;
    }
  }
}

function yellow_pages_sync_taxonomy(&$context) {
  $conn = Database::getConnection('default', 'mdb');
  $query = $conn->select('product_node', 'pn');
  $query->fields('pn', array('id', 'ru_field', 'ro_field', 'en_field'));
  // @todo
  // Experimental setting.
  $query->condition('pn.id', '2', '>');
  $result = $query->execute()->fetchAll();

  $voc = taxonomy_vocabulary_machine_name_load(CATEGORIES_VOCABULARY);

  if (!$voc) {
    watchdog('yp_sync', 'Vocabulary with name "@name" not found.', array('@name' => CATEGORIES_VOCABULARY), WATCHDOG_NOTICE);
    return;
  }

  $vid = $voc->vid;

  foreach ($result as $r) {
    $name = $r->ru_field;
    $parent = yellow_pages_sync_create_term($name, $vid);

    $query = $conn->select('product_product', 'pp');
    $query->join('product_node_products', 'pnp', 'pp.id = pnp.product_id');
    $query->fields('pp', array('ru_field', 'ro_field', 'en_field'));
    $query->condition('pnp.node_id', $r->id, '=');
    $pp_result = $query->execute()->fetchAll();

    foreach ($pp_result as $pp_r) {
      $pp_name = $pp_r->ru_field;
      yellow_pages_sync_create_term($pp_name, $vid, $parent);
    }
  }
}

function yellow_pages_sync_create_term($name, $vid, $parent = NULL) {
  $name = trim($name);

  $term = taxonomy_get_term_by_name($name);
  if (empty($term)) {
    $term = new stdClass();
    $term->name = $name;
    $term->vid = $vid;

    if ($parent) {
      $term->parent = (int) $parent;
    }

    taxonomy_term_save($term);
  }
  else {
    $term = reset($term);
  }

  return $term->tid;
}

function yellow_pages_sync_batch_finish($success, $results, $operations) {
  drupal_get_messages();
  if ($success) {
    drupal_set_message(t('Synchronisation process complete.'));
  }
  else {
    drupal_set_message(t('Synchronisation process failed.'), 'error');
  }
}
