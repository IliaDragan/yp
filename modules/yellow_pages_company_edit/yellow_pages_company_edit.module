<?php
/**
 * @file
 * User edit company modify default permissions.
 */

/**
 * Implements hook_permission().
 *
 * Add permission to edit only related companies nodes.
 */
function yellow_pages_company_edit_permission() {
  return array(
    'edit related companies' => array(
      'title' => t('Edit related companies'),
      'description' => t('Allow users to edit only related companies.'),
    ),
    'add related companies to user' => array(
      'title' => t('Add related companies to user'),
      'description' => t('Allow users to add related companies to another users (works only if role has permission "Administer users").'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide field related company for users that haven't permission
 *   "Edit related companies".
 */
function yellow_pages_company_edit_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form['#user'];
  $access = user_access('edit related companies', $account) && user_access('add related companies to user');
  $form['field_related_company']['#access'] = $access;
}

/**
 * Implements hook_node_access().
 */
function yellow_pages_company_edit_node_access($node, $op, $account) {
  $access = NODE_ACCESS_IGNORE;

  if ($op == 'update' && user_access('edit related companies', $account)) {
    $node_is_company = !empty($node->type) && $node->type == 'company';
    if ($node_is_company) {
      $grant = _yellow_pages_company_edit_grant_company_node_access($node->nid, $account);
      $access = $grant ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
    }
  }

  return $access;
}

/**
 * Verify if company node nid is related to indicated account or current user.
 */
function _yellow_pages_company_edit_grant_company_node_access($nid, $account = NULL) {
  if (empty($account->uid)) {
    $account = $GLOBALS['user'];
  }

  $account = user_load($account->uid);
  $related_companies = array();
  if (!empty($account->field_related_company['und'])) {
    foreach ($account->field_related_company['und'] as $company) {
      $node = node_load($company['target_id']);
      $node->tnid;
      $translations = translation_node_get_translations($node->tnid);
      foreach ($translations as $related_company) {
        $related_companies[] = $related_company->nid;
      }
    }
  }

  return in_array($nid, $related_companies);
}
