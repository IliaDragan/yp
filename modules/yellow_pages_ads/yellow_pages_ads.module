<?php
/**
 * @file
 * Code for the Yellow Pages Ads feature.
 */

define('YP_ADS_AMOUNT', 3);

include_once 'yellow_pages_ads.features.inc';

/**
 * Implements hook_menu().
 */
function yellow_pages_ads_menu() {
  $menu = array();

  $menu['node/%/ad_rules'] = array(
    'title' => 'Display rules',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yellow_pages_ads_node_display_rules_form', 1),
    'access callback' => 'yellow_pages_ads_rules_access',
    'type' => MENU_LOCAL_TASK,
    'file' => 'yellow_pages_ads.rules.inc',
    'weight' => 2,
  );

  $menu['yellow_pages_ads/autocomplete'] = array(
    'page callback' => 'yellow_pages_ads_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'yellow_pages_ads.rules.inc',
  );

  return $menu;
}

/**
 * Implements hook_permission().
 */
function yellow_pages_ads_permission() {
  $perm = array();

  $perm['access rules config'] = array(
    'title' => t('Advertisement display rules'),
    'description' => t('Use this to allow roles manage ad display rules.'),
  );

  return $perm;
}

/**
 * Implements hook_admin_paths().
 */
function yellow_pages_ads_admin_paths() {
  $paths = array(
    'node/*/ad_rules' => TRUE,
  );

  return $paths;
}

/**
 * Forbids access to rules tab for any content type
 * except advertisements.
 *
 * @return boolean
 *   Access status.
 */
function yellow_pages_ads_rules_access() {
  $nid = arg(1);
  $node = node_load($nid);

  if (is_object($node) && $node->type == 'advertisement' && user_access('access rules config')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_theme().
 */
function yellow_pages_ads_theme() {
  $hooks = array();

  $hooks['yellow_pages_ads_rules_form'] = array(
    'render element' => 'element',
  );

  return $hooks;
}

/**
 * Retrieves ads nodes.
 *
 * @param int $limit
 *   Number of nodes to fetch.
 * @param string $order
 *   Nodes ordering.
 *
 * @return array
 *   Set of node objects.
 */
function yellow_pages_ads_get_ads($limit = YP_ADS_AMOUNT, $order = 'random') {
  $node = menu_get_object('node');
  $forced_hidden = yellow_pages_ads_get_priority_ads($node->nid, 0);
  $forced_shown = yellow_pages_ads_get_priority_ads($node->nid, 1);

  $forced_result = array();
  if (!empty($forced_shown)) {
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->condition('n.status', NODE_PUBLISHED, '=');
    $query->condition('n.nid', $forced_shown, 'IN');
    $forced_result = $query->execute()->fetchCol();
  }

  $result = array();
  $forced_count = count($forced_result);
  if ($forced_count < $limit) {
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->condition('n.status', NODE_PUBLISHED, '=');
    $query->range(0, $limit - $forced_count);

    if ($order == 'asc' || $order == 'desc') {
      $query->orderBy('n.title', $order);
    }
    else {
      $query->orderRandom();
    }

    if (!empty($forced_hidden)) {
      $query->condition('n.nid', $forced_hidden, 'NOT IN');
    }

    if (!empty($forced_shown)) {
      $query->condition('n.nid', $forced_shown, 'NOT IN');
    }

    $result = $query->execute()->fetchCol();
  }

  $nodes = node_load_multiple(array_merge($forced_result, $result));

  return $nodes;
}

/**
 * Get prioritized ads.
 *
 * @param int $nid
 *   Node id, whose page is rendered at the moment.
 * @param int $state
 *   Forced hidden/shown (0/1) ads.
 *
 * @return array
 *   Set of ad node id's.
 */
function yellow_pages_ads_get_priority_ads($nid, $state = 0) {
  $rules = variable_get('yellow_pages_ads_rules', array());

  $hide_ads = array();
  foreach ($rules as $ad_nid => $ad_rules) {
    foreach ($ad_rules as $rule) {
      if (preg_match('/^.*\s\[nid:' . $nid . '\]$/', $rule['entity']) && $rule['rule'] == $state) {
        $hide_ads[] = $ad_nid;
      }
    }
  }

  return $hide_ads;
}

/**
 * Assemble content to be displayed.
 *
 * @param array $nodes
 *   Set of nodes that require render.
 *
 * @return string
 *   Nodes markup.
 */
function yellow_pages_ads_create_content(array $nodes) {
  $content = array();

  foreach ($nodes as $node) {
    $render = node_view($node);
    $content[] = drupal_render($render);
  }

  return implode('', $content);
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function yellow_pages_ads_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/content_types';
  }
}
